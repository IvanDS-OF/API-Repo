

En desarrollo web, un ednpoint es un punto a traves de la cual se realizan solicitudes o requests
a un servidor
Permite el envio y la recepción de datos a traves del protocolo HTTP
Cuando se define un endpoint se define el méroto HTTP
que indica qué es lo que se le quiere solicitar al servidor. 
Los metodos mas utilizados son 
Get, Post, Put y Delete

    *Query parameters
Los query parameters son los que se reciben a traves de la URL despues del PATH. 
Los query parameters se encuentra despues de un signo de interrogación "?" despues
del nombre de un parámetro, un igual "=" o un valor asignado


    /Path parameters
Los Path parameters son aquellos que llegan a traves de ka ruta del endpoint 
Estos parametros llegan como parte de la ruta despues deun slash "/" se usan para acceder
o filtrar la informacion de un objeto o un recurso en especifico 


    *Body parameters
Los body parameters osn los datos que nos llegan en el cuerpo de la petición en forma de objeto
igualmente se les llama response body a la respuesta que no entrega la petición 
El metodo Get no suele llevar un body parameter, pero los metdos Post, Put and Patch sí 
suelen recibir datos a traves del body para la creación y actualización de datos 



    /Modelos
Es la estructura o esquema de un objeto. Se define con el fin de manejar los datos de la aplicacion
Los modelos tambien permiten el intercambio de datos entre la aplicacion y una base de datos 
Para la definicion de modelos en FastAPI podemos hacer uso de la librería PyDantic
Los modelos pueden ser, tanto los datos recibidos como los que entrega
Los modelos que se definien con Pydantic, tienenque ser hijas de Base Model

Los modelos igualmente nos ayudan a validar los datos de entrada, en caso de no cumplirse algún parametro
recibiremos un error 404 que nos indica que algo no está bien en los datos input



//Path operation
Es el nombre que se le da a la definicion de un endpoint en FastAPI, Al definir un Path Operator tendremos un 
path operator decorator que nos ayuda a definir el método HTTP y un Patb Operation Function que 
hacer referencia a la funcion y por ende, a lo que nuestro Endpoint va a realizar



//Tareas Asincronas 
A diferencia de la programación sincrona, esta nos permite que varias tareas sean ejecutadas al mismo tiempo
Mientras una tarea inicia, otra puede estar siendo procesada al mismo tiempo. en Python se le conoce como
CONCURRENCIA
Con FastAPI las funciones se definen con async, de esta marea FastAPI nos permitira manejar multiples 
peticiones al mismo tiempo 



//Uso de formularios
Igulamente podemos hacer uso de formularios para recibir informacion, que es una versión más cómoda de 
hacer uso de un script JSON a traves del body.  Recordar la librería PYTHON-MULTIPART



//Manipulacion de archivos en un edpoint con FastAPI
Es posible cargar archivos dentro del cuarpo de la petición. Generalemte, el nombre del archivo es guardado 
en la base de datos y el contenido del archivo son almacenados en un servicio de almacenamiento - como Dockers
Usamos las clases de File and UploadFile de FastAPI


//APIRouter
Es una clase de FastAPI que permite MODULARIZAR el proyecto lo que hace que este sea más organizado
y escalable. El Router permite separar por modulos los endpoints (path operations) 
Es necesario realizar una configuración inicial del proyecto (carpetas y subcarpetas así como archivos especiales)
NewFolder - routers
    NewFile - routers - __init__.py
    Es necesario crear eeste archiov para que Python lo reconozca como un paquete parte de la app


//Tags
Pa





